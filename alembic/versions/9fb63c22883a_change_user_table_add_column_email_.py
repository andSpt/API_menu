"""change user_table, add column email, regstered_at, is_active

Revision ID: 9fb63c22883a
Revises: 33dc7d40d7fd
Create Date: 2024-02-29 00:52:04.785798

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "9fb63c22883a"
down_revision: Union[str, None] = "33dc7d40d7fd"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "user_table",
        sa.Column("password", sa.String(length=128), nullable=False),
    )
    op.add_column(
        "user_table", sa.Column("email", sa.String(length=120), nullable=True)
    )
    op.add_column(
        "user_table", sa.Column("is_active", sa.Boolean(), nullable=False)
    )
    op.add_column(
        "user_table",
        sa.Column(
            "registered_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
    )
    op.create_unique_constraint(None, "user_table", ["password"])
    op.drop_column("user_table", "password_hash")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "user_table",
        sa.Column(
            "password_hash",
            sa.VARCHAR(length=128),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.drop_constraint(None, "user_table", type_="unique")
    op.drop_column("user_table", "registered_at")
    op.drop_column("user_table", "is_active")
    op.drop_column("user_table", "email")
    op.drop_column("user_table", "password")
    # ### end Alembic commands ###
